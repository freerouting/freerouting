buildscript {
    repositories {
        mavenCentral()
        google()
    }

    dependencies {
        //
    }
}

plugins {
    //id "com.github.hierynomus.license" version "0.16.1"
    id 'java'
    id 'maven-publish'
    id 'net.nemerosa.versioning' version '3.0.0'
    id 'com.jfrog.bintray' version '1.8.5'
    id 'com.github.ben-manes.versions' version '0.43.0'

    // jigsaw:
//    id 'org.gradle.java.experimental-jigsaw' version '0.1.1'
}

ext.mainClassName = 'app.freerouting.gui.MainApplication'

wrapper {
    gradleVersion = '7.3'
}

sourceCompatibility = '17'
targetCompatibility = '17'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

// javadoc is way too strict for my taste.
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption("encoding", "UTF-8")
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

repositories {
    mavenCentral()
    google()
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'

    // https://mvnrepository.com/artifact/javax.help/javahelp
    implementation group: 'javax.help', name: 'javahelp', version: '2.0.05'

    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.19.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.19.0'
}


Date buildTimeAndDate = new Date()
ext {
    buildDate = new java.text.SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new java.text.SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
}

jar {
    manifest {
        attributes(
          'Automatic-Module-Name': 'app.freerouting',
          'Built-By': System.properties['user.name'],
          'Created-By': System.properties['java.version'] + " (" + System.properties['java.vendor'] + " " + System.properties['java.vm.version'] + ")",
          'Build-Date': project.buildDate,
          'Build-Time': project.buildTime,
          'Build-Revision': versioning.info.commit,
          'Specification-Title': project.name,
          'Specification-Version': project.version,
          'Implementation-Title': project.name,
          'Implementation-Version': project.version
        )
    }
}

task executableJar(type: Jar) {
    classifier = 'executable'
	
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    from configurations.runtimeClasspath.collect { zipTree(it) }

    from files(sourceSets.main.output)

    manifest {

        attributes(
                'Automatic-Module-Name': 'app.freerouting',
                'Built-By': System.properties['user.name'],
                'Created-By': System.properties['java.version'] + " (" + System.properties['java.vendor'] + " " + System.properties['java.vm.version'] + ")",
                'Build-Date': project.buildDate,
                'Build-Time': project.buildTime,
                'Build-Revision': versioning.info.commit,
                'Specification-Title': project.name,
                'Specification-Version': project.version,
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Main-Class': mainClassName
        )
    }
}

apply from: 'gradle/publishing.gradle'

// write constants to code
task writeVersionInfo() {
    doLast {
        def buildInfoCode = new File("${project.buildDir}/generated-src/app/freerouting/constants/Constants.java")
        buildInfoCode.getParentFile().mkdirs()
        buildInfoCode.write("package app.freerouting.constants;\n"
                + "public class Constants {\n"
                + "  public static final String FREEROUTING_VERSION = \"${publishing.versionId}\";\n"
                + "  public static final String FREEROUTING_BUILD_DATE = \"${buildDate}\";\n"
                + "}\n"
        )
    }
}

// add the 'vmfconstants' src dir to the folders to compile (input to groovyc)
sourceSets.main.java.srcDirs+=file("${project.buildDir}/generated-src/app/freerouting/constants/")

compileJava.dependsOn+="writeVersionInfo"


task dist(type: Copy) {
    from('build/libs/freerouting-executable.jar')
    into('build/dist/')
}

dist.dependsOn+="assemble"

task run(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    mainClass = mainClassName

    // arguments to pass to the application
    //    args 'appArg1'
    // jvmArgs 'arg1'
}

